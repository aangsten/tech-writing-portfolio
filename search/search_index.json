{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"concepts/high-availability-basics/","text":"Concept: Understanding High Availability and Failover with Load Balancers Overview High Availability (HA) ensures that systems remain accessible even when individual components fail. Load balancers are a key part of HA strategies, distributing traffic across multiple servers and handling failover. Audience: IT professionals, support engineers, developers Skill Level: Beginner\u2013Intermediate Key Concepts High Availability (HA): Designing systems to minimize downtime. Failover: Automatic redirection of traffic when a server becomes unavailable. Load Balancer: A device or software that distributes traffic among servers. How Failover Works Health checks detect an unhealthy server Load balancer removes the server from rotation Traffic is routed to healthy servers Failed server is restored and re-added Example Diagram Insert a simple diagram later showing clients \u2192 load balancer \u2192 servers Best Practices Use multiple load balancer nodes (active-passive or active-active). Monitor system health regularly. Test failover scenarios before production use. References Nginx Load Balancing Basics F5 BIG-IP Concepts","title":"High Availability Basics"},{"location":"concepts/high-availability-basics/#concept-understanding-high-availability-and-failover-with-load-balancers","text":"","title":"Concept: Understanding High Availability and Failover with Load Balancers"},{"location":"concepts/high-availability-basics/#overview","text":"High Availability (HA) ensures that systems remain accessible even when individual components fail. Load balancers are a key part of HA strategies, distributing traffic across multiple servers and handling failover. Audience: IT professionals, support engineers, developers Skill Level: Beginner\u2013Intermediate","title":"Overview"},{"location":"concepts/high-availability-basics/#key-concepts","text":"High Availability (HA): Designing systems to minimize downtime. Failover: Automatic redirection of traffic when a server becomes unavailable. Load Balancer: A device or software that distributes traffic among servers.","title":"Key Concepts"},{"location":"concepts/high-availability-basics/#how-failover-works","text":"Health checks detect an unhealthy server Load balancer removes the server from rotation Traffic is routed to healthy servers Failed server is restored and re-added","title":"How Failover Works"},{"location":"concepts/high-availability-basics/#example-diagram","text":"Insert a simple diagram later showing clients \u2192 load balancer \u2192 servers","title":"Example Diagram"},{"location":"concepts/high-availability-basics/#best-practices","text":"Use multiple load balancer nodes (active-passive or active-active). Monitor system health regularly. Test failover scenarios before production use.","title":"Best Practices"},{"location":"concepts/high-availability-basics/#references","text":"Nginx Load Balancing Basics F5 BIG-IP Concepts","title":"References"},{"location":"setup-guides/restore-sql-database-azure/","text":"Restoring SQL Database in Azure Portal Introduction This guide describes how to restore a SQL Database using the Azure Portal. It covers selecting the correct subscription and database, performing a restore, configuring the database, and optionally moving the restored database into an elastic pool. Prerequisites Access to the Azure Portal with permissions to restore databases. Knowledge of the production database name (for example xyz_prod ). Restore procedure Sign in to the Azure Portal Open: https://portal.azure.com/#home Open SQL Databases From Home, select SQL Databases . Change subscription If needed, switch the subscription to XYZ Production . Locate the production database Search for the company name (for example: XYZ ) and open the production database (for example: xyz_prod ). Start a restore Click Restore on the database blade. Set restore point and time adjustments Choose the backup/restore point you need. If the restore time crosses a daylight savings boundary: For fall (clocks back): set the UTC offset to +6 hours (based on Central Time). For spring (clocks forward): set the UTC offset to +5 hours (based on Central Time). Name the restored database Remove any timestamp from the suggested name and add a identifying suffix (for example: _andrew or _dr ). Configure compute and storage Service tier: Standard DTUs: 400 Backup storage redundancy: Locally-redundant backup storage Review and create Click Review + Create , verify settings, then Create . Wait until deployment completes. Open the restored resource Click Go to resource once deployment finishes. (Optional) Copy or rename for data restore workflows From the restored database Overview , use Copy if you need a separate copy. Append dr (or another suffix) to indicate a data-restore copy. Select restore server Example target server: restoresql01 (East US 2). Confirm backup storage redundancy is set to Locally-redundant . Move the database into an elastic pool (optional) Open the server (for example: restoresql01.database.windows.net ). Under SQL elastic pool , select restoresql01_ep01 \u2192 Configure \u2192 Databases \u2192 Add databases . Check the newly restored database and click Apply , then Save . Clean up / delete old or test databases (if required) From SQL Databases , select the database to delete. Follow the delete confirmation steps: Type your name when prompted. Check the database (for example: xyz_prod_andrew ) and click Delete . Type delete to confirm. These steps provide a comprehensive guide to restoring a SQL database in the Azure Portal, ensuring proper configurations and necessary adjustments are made throughout the process.","title":"Restore SQL Database in Azure"},{"location":"setup-guides/restore-sql-database-azure/#restoring-sql-database-in-azure-portal","text":"","title":"Restoring SQL Database in Azure Portal"},{"location":"setup-guides/restore-sql-database-azure/#introduction","text":"This guide describes how to restore a SQL Database using the Azure Portal. It covers selecting the correct subscription and database, performing a restore, configuring the database, and optionally moving the restored database into an elastic pool.","title":"Introduction"},{"location":"setup-guides/restore-sql-database-azure/#prerequisites","text":"Access to the Azure Portal with permissions to restore databases. Knowledge of the production database name (for example xyz_prod ).","title":"Prerequisites"},{"location":"setup-guides/restore-sql-database-azure/#restore-procedure","text":"Sign in to the Azure Portal Open: https://portal.azure.com/#home Open SQL Databases From Home, select SQL Databases . Change subscription If needed, switch the subscription to XYZ Production . Locate the production database Search for the company name (for example: XYZ ) and open the production database (for example: xyz_prod ). Start a restore Click Restore on the database blade. Set restore point and time adjustments Choose the backup/restore point you need. If the restore time crosses a daylight savings boundary: For fall (clocks back): set the UTC offset to +6 hours (based on Central Time). For spring (clocks forward): set the UTC offset to +5 hours (based on Central Time). Name the restored database Remove any timestamp from the suggested name and add a identifying suffix (for example: _andrew or _dr ). Configure compute and storage Service tier: Standard DTUs: 400 Backup storage redundancy: Locally-redundant backup storage Review and create Click Review + Create , verify settings, then Create . Wait until deployment completes. Open the restored resource Click Go to resource once deployment finishes. (Optional) Copy or rename for data restore workflows From the restored database Overview , use Copy if you need a separate copy. Append dr (or another suffix) to indicate a data-restore copy. Select restore server Example target server: restoresql01 (East US 2). Confirm backup storage redundancy is set to Locally-redundant . Move the database into an elastic pool (optional) Open the server (for example: restoresql01.database.windows.net ). Under SQL elastic pool , select restoresql01_ep01 \u2192 Configure \u2192 Databases \u2192 Add databases . Check the newly restored database and click Apply , then Save . Clean up / delete old or test databases (if required) From SQL Databases , select the database to delete. Follow the delete confirmation steps: Type your name when prompted. Check the database (for example: xyz_prod_andrew ) and click Delete . Type delete to confirm. These steps provide a comprehensive guide to restoring a SQL database in the Azure Portal, ensuring proper configurations and necessary adjustments are made throughout the process.","title":"Restore procedure"},{"location":"troubleshooting/sql-epoch-conversion/","text":"Troubleshooting Guide: Converting Epoch Timestamps in SQL Server Overview When working with applications or logs that store timestamps in Unix epoch format, you may need to convert them into a human-readable datetime in SQL Server. This guide explains common issues, provides working solutions, and highlights pitfalls to avoid. Audience: Database administrators, support engineers, and developers. Skill Level: Intermediate Problem You have a column storing epoch timestamps (e.g., 1694467200 ) but queries return unreadable numbers instead of dates. Example: SELECT EventTimeEpoch FROM Logs; -- Output: 1694467200 Root Cause SQL Server does not natively store or interpret Unix epoch timestamps. Conversion requires explicit handling. Solutions Convert Epoch to DateTime SELECT DATEADD(SECOND, EventTimeEpoch, '1970-01-01') AS EventTime FROM Logs; Handling Milliseconds Epoch If your data stores epoch in milliseconds: SELECT DATEADD(SECOND, EventTimeEpoch / 1000, '1970-01-01') AS EventTime FROM Logs; Common Pitfalls Forgetting to divide milliseconds by 1000 | results in incorrect dates. Not accounting for UTC vs local timezone differences. Using DATETIME instaed of DATETIME2 | potential precision issues. Verification Run this query to confirm conversion works: SELECT TOP 5 EventTimeEpoch, DATEADD(SECOND, EventTimeEpoch, '1970-01-01') AS ConvertedTime FROM Logs; Expected output should match known event timestamps.","title":"SQL Epoch Conversion"},{"location":"troubleshooting/sql-epoch-conversion/#troubleshooting-guide-converting-epoch-timestamps-in-sql-server","text":"","title":"Troubleshooting Guide: Converting Epoch Timestamps in SQL Server"},{"location":"troubleshooting/sql-epoch-conversion/#overview","text":"When working with applications or logs that store timestamps in Unix epoch format, you may need to convert them into a human-readable datetime in SQL Server. This guide explains common issues, provides working solutions, and highlights pitfalls to avoid. Audience: Database administrators, support engineers, and developers. Skill Level: Intermediate","title":"Overview"},{"location":"troubleshooting/sql-epoch-conversion/#problem","text":"You have a column storing epoch timestamps (e.g., 1694467200 ) but queries return unreadable numbers instead of dates. Example: SELECT EventTimeEpoch FROM Logs; -- Output: 1694467200","title":"Problem"},{"location":"troubleshooting/sql-epoch-conversion/#root-cause","text":"SQL Server does not natively store or interpret Unix epoch timestamps. Conversion requires explicit handling.","title":"Root Cause"},{"location":"troubleshooting/sql-epoch-conversion/#solutions","text":"","title":"Solutions"},{"location":"troubleshooting/sql-epoch-conversion/#convert-epoch-to-datetime","text":"SELECT DATEADD(SECOND, EventTimeEpoch, '1970-01-01') AS EventTime FROM Logs;","title":"Convert Epoch to DateTime"},{"location":"troubleshooting/sql-epoch-conversion/#handling-milliseconds-epoch","text":"If your data stores epoch in milliseconds: SELECT DATEADD(SECOND, EventTimeEpoch / 1000, '1970-01-01') AS EventTime FROM Logs;","title":"Handling Milliseconds Epoch"},{"location":"troubleshooting/sql-epoch-conversion/#common-pitfalls","text":"Forgetting to divide milliseconds by 1000 | results in incorrect dates. Not accounting for UTC vs local timezone differences. Using DATETIME instaed of DATETIME2 | potential precision issues.","title":"Common Pitfalls"},{"location":"troubleshooting/sql-epoch-conversion/#verification","text":"Run this query to confirm conversion works: SELECT TOP 5 EventTimeEpoch, DATEADD(SECOND, EventTimeEpoch, '1970-01-01') AS ConvertedTime FROM Logs; Expected output should match known event timestamps.","title":"Verification"},{"location":"tutorials/f5-powershell-automation/","text":"Tutorial: Automating F5 Load Balancer Tasks with PowerShell Overview This tutorial walks through automating a common F5 load balancer task \u2014 forcing a server offline \u2014 using PowerShell and SSH. It demonstrates scripting basics, automation workflow, and verification steps. Audience: System administrators, support engineers Skill Level: Intermediate Prerequisites PowerShell 5.1 or later SSH access to the F5 load balancer Appropriate permissions to manage pool members Steps Connect to the F5 via SSH Run the PowerShell script to force a server offline Verify the server status Bring the server back online (if needed) Example Script ```powershell $server = \"10.0.0.5\" $pool = \"web_pool\" ssh admin@f5 \"tmsh modify ltm pool $pool members modify { $server:80 { session user-disabled } }\"","title":"Automating F5 Load Balancer Tasks"},{"location":"tutorials/f5-powershell-automation/#tutorial-automating-f5-load-balancer-tasks-with-powershell","text":"","title":"Tutorial: Automating F5 Load Balancer Tasks with PowerShell"},{"location":"tutorials/f5-powershell-automation/#overview","text":"This tutorial walks through automating a common F5 load balancer task \u2014 forcing a server offline \u2014 using PowerShell and SSH. It demonstrates scripting basics, automation workflow, and verification steps. Audience: System administrators, support engineers Skill Level: Intermediate","title":"Overview"},{"location":"tutorials/f5-powershell-automation/#prerequisites","text":"PowerShell 5.1 or later SSH access to the F5 load balancer Appropriate permissions to manage pool members","title":"Prerequisites"},{"location":"tutorials/f5-powershell-automation/#steps","text":"Connect to the F5 via SSH Run the PowerShell script to force a server offline Verify the server status Bring the server back online (if needed)","title":"Steps"},{"location":"tutorials/f5-powershell-automation/#example-script","text":"```powershell $server = \"10.0.0.5\" $pool = \"web_pool\" ssh admin@f5 \"tmsh modify ltm pool $pool members modify { $server:80 { session user-disabled } }\"","title":"Example Script"}]}